<?php
namespace App\Controller;

use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Routing\Annotation\Route;

use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;

use App\Entity\User;
use App\Entity\Document;
use App\Entity\Type;
use Symfony\Component\Form\Extension\Core\Type\FileType;
use Symfony\Component\Form\Extension\Core\Type\HiddenType;
use Symfony\Component\Filesystem\Filesystem;







class DocumentController extends Controller {


    /**
     * @Route("/ajax" , name="document_list")
     * @Method({"GET"})
     */
    public function index(Request $request) {


       $docs = $this->getDoctrine()->getRepository
        (Document::class)->findAll();


        //return $this->render('articles/index1.html.twig', array ('articles'=> $articles));

      if($request->isXmlHttpRequest() || $request->query->get('showJson') == 1)
        {
            $documents = array();
            $i = 0;
            foreach ($docs as $document) {

                if ($this->getUser() == $document->getUser()) {

                    $show = array(
                        'id' => $document->getId(),
                        'docName' => $document->getDocName(),
                        'doc_upload' => $document->getDoc_Upload(),

                    );
                $documents[$i++] = $show;
            }
                };

                return new JsonResponse($documents);

            }


        else
        {
            return $this->render('documents/index.html.twig');
        }


     }




    /**
     * @Route("/", name="document_new")
     * Method({"GET","POST"})
     */
    public function new(Request $request) {



        $document = new document();

            $form = $this->createFormBuilder($document)
                ->add('type', EntityType::class, [
                    'class' => Type::class,
                    'label' => false
                ])
                ->add('doc_upload', FileType::class,
                    array('label' => false
                    ))
                // ->add('save', SubmitType::class,
                //array('label' => 'Create',
                  //  'attr' => array('id' => 'submit','class' => 'btn btn-primary mt-3')
                 //))
                ->getForm();



            $form->handleRequest($request);


            if ($form->isSubmitted() && $form->isValid()) {


                //get docType name from the input above
                $documentType = $document->getType();
                //get file from the input above
                $file = $document->getDoc_Upload();
                $doc_upload = $this->getParameter('doc_upload');
                $filename = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                $file->move(
                    $doc_upload,
                    $filename
                );

                //store both values from above
                $document->setDocName($documentType);
                $document->setDoc_Upload($filename);

                $document = $form->getData();


                $document->setUser($this->getUser());


                $entityManager = $this->getDoctrine()->getManager();
                $entityManager->persist($document);
                $entityManager->flush();
            }


     return   $this->render('documents/index.html.twig',
         array('form' =>$form->createView()));



    }


    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/edit/{id}", name="article_edit")
     * Method({"GET","POST"})
     */
    public function edit(Request $request , $id) {

        $document = $this->getDoctrine()->getRepository
        (Document::class)->find($id);

        $form = $this->createFormBuilder($document)
            ->add('type', EntityType::class,[
                'class'=>Type::class,
                'label'=>false
            ])
            ->add('doc_upload', FileType::class,
                array(
                    'data_class'=>null,'required'=>false,'label'=>false
                ))
            /*->add('save', SubmitType::class,
                array('label'=>'Edit',
                    'attr'=>array('class'=>'btn btn-primary mt-3')
                )) */
            ->getForm();
        $oldFile = $document ->getDoc_Upload();

        $form->handleRequest($request);

        if($form->isSubmitted() && $form->isValid()) {


            //get docType name from the input above
            $documentType=$document->getType();

            if($document->getDoc_Upload()!=null) {
                $file = $document->getDoc_Upload();
                $doc_upload = $this->getParameter('doc_upload');
                //setting path to delete old file from its directory
                $path=$this->getParameter('doc_upload').'/'.$oldFile;
                $filesystem = new Filesystem();
                $filesystem->remove(array($path));

                $filename = $this->generateUniqueFileName() . '.' . $file->guessExtension();
                $file->move(
                    $doc_upload,
                    $filename
                );

                $document->setDoc_Upload($filename);

            }
            else {
                $document->setDoc_Upload($oldFile);
            }

            $document->setDocName($documentType);
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->flush();

            return $this->redirectToRoute('document_new');
        }



        return $this->render('documents/edit.html.twig',
            array('form'=>$form->createView()));

    }


    /**
     * @Route("/document/delete/{id}", methods={"delete"}, options={"expose"=true})
     * Method({"DELETE"})
     */
    public function delete($id) {

        $document = $this->getDoctrine()->getRepository
        (Document::class)->find($id);


        $filename = $document->getDoc_Upload();
        $path=$this->getParameter('doc_upload').'/'.$filename;
        $filesystem = new Filesystem();
        $filesystem->remove(array($path));

        $entityManager = $this->getDoctrine()->getManager();
        $entityManager->remove($document);
        $entityManager->flush();

        //$response= new Response();
       // $response->send();
    }


}